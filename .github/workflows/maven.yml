name: Java CI with Maven

on:
  push:
    branches: [ "main", "master", "develop" ]
  pull_request:
    branches: [ "main", "master" ]
  release:
    types: [ published ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🏗️ Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven

    - name: 🔧 Build with Maven
      run: mvn -B clean package --file pom.xml
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 📊 Upload JAR artifact
      uses: actions/upload-artifact@v4
      with:
        name: ChatSync-JAR
        path: target/*.jar
        retention-days: 30

    - name: 🏷️ Get version from POM
      id: get_version
      run: echo "version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_OUTPUT

    - name: 🚀 Create GitHub Release
      if: github.event_name == 'release'
      uses: softprops/action-gh-release@v1
      with:
        files: target/*.jar
        body: |
          ## 🎉 ChatSync ${{ steps.get_version.outputs.version }}
          
          ### ✨ Новый релиз плагина синхронизации чата Minecraft-Telegram
          
          **Авторы:** gordey9992 & DeepSeek
          
          ### 📦 Что нового:
          - Синхронизация чата Minecraft ↔ Telegram
          - Поддержка EssentialsXChat & EssentialsX
          - Полная русская локализация
          - Настраиваемые форматы сообщений
          
          ### 🚀 Установка:
          1. Скачайте JAR файл
          2. Поместите в папку `plugins/`
          3. Настройте `config.yml`
          4. Перезагрузите сервер
          
          ### 📖 Документация:
          - [GitHub Repository](https://github.com/${{ github.repository }})
          - [Config Guide](https://github.com/${{ github.repository }}/blob/main/README.md)

  test:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🏗️ Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven

    - name: 🔍 Run tests
      run: mvn -B test --file pom.xml

    - name: 📊 Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: target/surefire-reports/
        retention-days: 7

  quality:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🏗️ Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven

    - name: 🔍 Checkstyle analysis
      run: mvn -B checkstyle:check --file pom.xml

    - name: 📈 JaCoCo coverage
      run: mvn -B jacoco:prepare-agent test jacoco:report --file pom.xml

    - name: 📤 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: target/site/jacoco/jacoco.xml
        flags: unittests
        name: codecov-umbrella

  deploy:
    runs-on: ubuntu-latest
    needs: [build, test, quality]
    if: github.event_name == 'release'
    
    steps:
    - name: 📥 Download JAR artifact
      uses: actions/download-artifact@v4
      with:
        name: ChatSync-JAR
        path: target/

    - name: 🏷️ Get version
      id: get_version
      run: echo "version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_OUTPUT

    - name: 📦 Prepare deployment
      run: |
        mkdir -p deployment
        cp target/*.jar deployment/
        echo "ChatSync v${{ steps.get_version.outputs.version }}" > deployment/version.txt
        date > deployment/build_date.txt

    - name: 🚀 Deploy to GitHub Pages (Documentation)
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./deployment
        keep_files: false

    - name: 📢 Notify Discord
      uses: sarisia/actions-status-discord@v1
      if: always()
      with:
        webhook: ${{ secrets.DISCORD_WEBHOOK }}
        title: "ChatSync Build Complete"
        description: "Build for ${{ github.ref }} completed with status: ${{ job.status }}"
        color: "0x00FF00"
        url: "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔒 CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: java

    - name: 🔍 Autobuild
      uses: github/codeql-action/autobuild@v2

    - name: 📊 Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

    - name: 🛡️ Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'ChatSync'
        path: '.'
        format: 'HTML'
        out: 'reports'

    - name: 📤 Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: reports/
        retention-days: 30

  notifications:
    runs-on: ubuntu-latest
    needs: [build, test, quality, security]
    if: always()
    
    steps:
    - name: 📱 Notify on failure
      if: failure()
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `🚨 Build Failed for ${context.ref}`,
            body: `Build failed for commit ${context.sha}. Check the [workflow run](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) for details.`,
            labels: ['bug', 'ci']
          })
